// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"go-architecture/api/handle"
	"go-architecture/api/router"
	"go-architecture/config"
	"go-architecture/database"
	"go-architecture/i18n"
	repository2 "go-architecture/repository"
	"go-architecture/repository/repo.mapper"
	service2 "go-architecture/service"
	"go-architecture/service/service.mapper"
)

// Injectors from injector.go:

func InitApp() (App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return App{}, err
	}
	i18nI18n, err := i18n.NewI18n(configConfig)
	if err != nil {
		return App{}, err
	}
	databaseDatabase, err := database.NewDatabase(configConfig)
	if err != nil {
		return App{}, err
	}
	routerRouter, err := router.NewRouterWithAuthMw(configConfig, i18nI18n)
	if err != nil {
		return App{}, err
	}
	infrastructure := &Infrastructure{
		Config:   configConfig,
		I18n:     i18nI18n,
		Database: databaseDatabase,
		Router:   routerRouter,
	}
	databaseRepository := database.Repository{
		DB: databaseDatabase,
	}
	companyCapacityMapper := repository.CompanyCapacityMapper{}
	companyCapacityRepository := repository2.ProviderCompanyCapacityRepository(databaseRepository, companyCapacityMapper)
	serviceCompanyCapacityMapper := service.CompanyCapacityMapper{}
	companyCapacityService := service2.ProvideCompanyCapacityService(companyCapacityRepository, serviceCompanyCapacityMapper)
	companyCapacityHandler := handle.ProvideCompanyCapacityHandler(companyCapacityService)
	app := App{
		Infra:                  infrastructure,
		companyCapacityHandler: companyCapacityHandler,
	}
	return app, nil
}
